
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    public Nodo padre;

    @Override
    public void syntax_error(Symbol s){
        System.out.println(s  +" Linea "+s.left+1 +"  Columna "+s.right   +" "+ (String)s.value);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }
:}

// Define los terminales (tokens) que vienen del lexer
terminal INT, BOOL, VOID, MAIN, RETURN, TRUE, FALSE;
terminal ID, NUMBER;
terminal PLUS, STAR, EQUAL, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;

// Define los no-terminales
non terminal PROGRAM; //Program
non terminal DECL; //Declaracion
non terminal STATEMENT;       //Statement
non terminal EXP;      //Expresion matematica
non terminal BLOCK;     //Bloque de codigo

// Precedencia de operadores
precedence left PLUS;
precedence left STAR;

//Producciones

PROGRAM ::=
        INT MAIN LPAREN RPAREN LBRACE BLOCK:a RBRACE {:
            System.out.println("Programa :");
            
        :}
    |   VOID MAIN LPAREN RPAREN LBRACE BLOCK:a RBRACE{:
            System.out.println("Programa :");
            
        :}
;

BLOCK ::=
        DECL:d BLOCK:b {:
            System.out.println("declaracion bloque");
            
        :}
    |   STATEMENT:s BLOCK:b {:
            System.out.println("sentencia bloque");
            
        :}
    |   /* epsilon */ {:
        System.out.println("EOF");
    :}
;

DECL ::=
        INT ID:id SEMICOLON {:
            System.out.println("int id ;");
        :}
    |   BOOL ID:id SEMICOLON {:
            System.out.println("Bool id;");
            
        :}
;

STATEMENT ::=
        ID:id EQUAL EXP:e SEMICOLON {:
            System.out.println("id equal exp semicolon");
            
        :}
    |   RETURN EXP:e SEMICOLON {:
            System.out.println("RETURN EXP:e SEMICOLON");
            
        :}
    |   RETURN SEMICOLON {:
            System.out.println("return;");
            
        :}
;

EXP ::=
        EXP:a PLUS EXP:b {:
            System.out.println("exp + exp");
            
        :}
    |   EXP:a STAR EXP:b {:
            System.out.println("exp * exp");
            
        :}
    |   LPAREN EXP:e RPAREN {:
            System.out.println("(expresion)");
        :}
    |   ID:id {:
            System.out.println("id");
        :}
    |   NUMBER:n {:
            System.out.println("num");
        :}
    |   TRUE {:
            System.out.println("TRUE");
        :}
    |   FALSE {:
            System.out.println("FALSE");
        :}
;