
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    //objetos
    public Nodo padre; //o nodo raiz
    //contadores y valores numericos
    public int contador = 0;
    public Integer returnValue = 0;
    public Integer offSetCounter = -16;
    public Integer tmpNameCounter = 0;
    public Integer labelCounter = 1;
    //listas
    public ArrayList<String> texto = new ArrayList<>();
    public SymbolTable symbolTable = new SymbolTable();  // Instanciar la tabla de símbolos
    public ArrayList<String> codeOutput = new ArrayList<>();
    public ArrayList<Cod3dir> cod3dirList = new ArrayList<>();

    @Override
    public void syntax_error(Symbol s){
        System.out.println(s  +" Linea "+s.left+1 +"  Columna "+s.right   +" "+ (String)s.value);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }
:}

// Define los terminales (tokens) que vienen del lexer
terminal INT, BOOL, VOID, MAIN, RETURN, TRUE, FALSE;
terminal ID, NUMBER;
terminal PLUS, STAR, EQUAL, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal IF, ELSE, WHILE;
terminal LESS, GREATER;

// Define los no-terminales
non terminal Nodo PROGRAM; //Program
non terminal Nodo DECL; //Declaracion
non terminal Nodo STATEMENT;       //Statement
non terminal Nodo EXP;      //Expresion matematica
non terminal Nodo BLOCK;     //Bloque de codigo
non terminal Nodo TYPE;	//BOOL O INT
non terminal Nodo VAR; //variable (auxiliar)
non terminal Nodo COMP; //Comparacion que retorna un BOOL

// Precedencia de operadores
precedence left PLUS;
precedence left STAR;

//Producciones

PROGRAM ::=
        INT MAIN LPAREN RPAREN LBRACE BLOCK:a RBRACE {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"int main :");
            Nodo tmp = new Nodo(new Info("programa",-1,null,null),parser.contador);
			tmp.addHijoIzq(a);
			parser.padre = tmp;
            
			RESULT = tmp;
        :}
    |   VOID MAIN LPAREN RPAREN LBRACE BLOCK:a RBRACE{:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"void main :");
            Nodo tmp = new Nodo(new Info("programa",-1,null,null),parser.contador);
			tmp.addHijoIzq(a);
			parser.padre = tmp;
            parser.returnValue = null;
			RESULT = tmp;
        :}
;

BLOCK ::=
        DECL:d BLOCK:b {:
            // Entrar a un nuevo alcance
            parser.symbolTable.enterScope();

            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"declaracion y bloque");
            Nodo tmp = new Nodo(new Info("L"+parser.labelCounter.toString(),-1,null,null),parser.contador);
			tmp.addHijoIzq(d);
			tmp.addHijoDer(b);

			RESULT = tmp;
            // Salir del alcance al terminar el bloque
            parser.symbolTable.exitScope();
        :}
    |   STATEMENT:s BLOCK:b {:
            // Entrar a un nuevo alcance
            parser.symbolTable.enterScope();
            
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"sentencia y bloque");
            Nodo tmp = new Nodo(new Info("L"+parser.labelCounter.toString(),-1,null,null),parser.contador);
			tmp.addHijoIzq(s);
			tmp.addHijoDer(b);
			RESULT = tmp;

            // Salir del alcance al terminar el bloque
            parser.symbolTable.exitScope();
        :}
    |   /* epsilon */ {:
			RESULT = null;
		:}
;

DECL ::=
        TYPE:t VAR:v SEMICOLON {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"DECLARACION: "+ t.info.tipo + "variable;");
			
            // Verificar si la variable ya existe en el ámbito actual
            String varName = v.info.nombre;
            if (parser.symbolTable.lookup(varName) != null) {
                System.out.println("Error: Variable '" + varName + "' ya declarada.");
            } else {
                // Agregar la variable a la tabla de símbolos
                parser.symbolTable.addSymbol(varName, parser.contador, null, t.info.tipo, v.info.offSet);
                Nodo tmp = new Nodo(new Info("declaracion",-1,0,null),parser.contador); //test, todos los valores seran inicializados en 0
                tmp.addHijoIzq(t);
                tmp.addHijoDer(v);
                RESULT = tmp;
            }

        :}
;

STATEMENT ::=
        VAR:v EQUAL EXP:e SEMICOLON {:
            parser.contador++;
            parser.tmpNameCounter++;
            //  Verificar que el tipo de la variable y la expresión sean compatibles
            Info varInfo = parser.symbolTable.lookup(v.info.nombre);
            if (varInfo == null) {
                throw new RuntimeException("Error: Variable '" + v.info.nombre + "' no está declarada.");
            }
            if (!varInfo.tipo.equals(e.info.tipo)) {
                throw new RuntimeException("Error: Tipos incompatibles en asignación. Se esperaba " + varInfo.tipo + " pero se obtuvo " + e.info.tipo);
            }else{

                parser.texto.add("graphid:"+parser.contador+" # variable = expresion");
                Nodo tmp = new Nodo(new Info("\"=\"",Simbolo.EQUAL,null,null),parser.contador);
                tmp.addHijoIzq(v);
                tmp.addHijoDer(e);

                //codigo de interprete
                parser.symbolTable.changeSymbolValue(v.info.nombre,e.info.value);
                RESULT = tmp;

            }

        :}
    |   RETURN EXP:e SEMICOLON {:
            parser.contador++;
            parser.tmpNameCounter++;
            parser.texto.add("graphid:"+parser.contador+" # "+"RETURN EXP:e SEMICOLON");
            Nodo tmp = new Nodo(new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.RETURN,null,null),parser.contador);
			tmp.addHijoIzq(e);
            parser.returnValue = e.info.value;
            // segmento cod3dir
            Cod3dir linea = new Cod3dir("RET",null,null,e.info);
            parser.codeOutput.add(Cod3dir.genLine(linea));
            parser.cod3dirList.add(linea);
            //
			RESULT = tmp;
        :}
    |   IF LPAREN COMP:e RPAREN LBRACE BLOCK:b RBRACE ELSE LBRACE BLOCK:b2 RBRACE {:
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"if(exp) {block} else {block}");
        Nodo tmp = new Nodo(new Info("\"Sentencia IF\"",-1,null,null),parser.contador);
        parser.contador++;
        Nodo aux = new Nodo(new Info("\"IF-ELSE\"",Simbolo.IF,null,null),parser.contador);
        tmp.addHijoIzq(e);
        aux.addHijoIzq(b);  // Bloque del if
        aux.addHijoDer(b2); // Bloque del else
        tmp.addHijoDer(aux);
        RESULT = tmp;
        :}
    | IF LPAREN COMP:e RPAREN LBRACE BLOCK:b RBRACE {:
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"if(exp) {block}");
        Nodo tmp = new Nodo(new Info("if",-1,null,null),parser.contador);
        tmp.addHijoIzq(e);
        tmp.addHijoDer(b);  // Bloque del if

        RESULT = tmp;
        :}
    |   WHILE LPAREN EXP:e RPAREN LBRACE BLOCK:b RBRACE {:
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"while(exp) {block}");
        Nodo tmp = new Nodo(new Info("while",-1,null,null),parser.contador);
        tmp.addHijoIzq(e);
        tmp.addHijoDer(b);  // Bloque del while
        RESULT = tmp;
        :}
;

EXP ::=
        EXP:a PLUS EXP:b {:
            parser.contador++;
            parser.tmpNameCounter++;
             // Verificar que ambos operandos son del mismo tipo y compatibles con suma
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en suma. Ambos deben ser enteros.");
            }else{
                int resultadoSuma=a.info.value + b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp + exp");
                Info tmpInfo = new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.PLUS,resultadoSuma,"entero",parser.offSetCounter);
                parser.offSetCounter = parser.offSetCounter - 16;
                Nodo tmp = new Nodo(tmpInfo,parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;
            }
        :}
    |   EXP:a STAR EXP:b {:
            parser.contador++;
            parser.tmpNameCounter++;
            // Verificar que ambos operandos son del mismo tipo y compatibles con suma
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en suma. Ambos deben ser enteros.");
            }else{
                int resultadoProducto=a.info.value*b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp * exp");
                Info tmpInfo = new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.STAR,resultadoProducto,"entero",parser.offSetCounter);
                parser.offSetCounter = parser.offSetCounter - 16;
                Nodo tmp = new Nodo(tmpInfo,parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;
            }
        :}
    |   LPAREN EXP:e RPAREN {:
            RESULT = e;
        :}
    |   ID:id {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+id.toString());


            // Buscar la variable en la tabla de símbolos
            String varName = id.toString();
            Info varInfo = parser.symbolTable.lookup(varName);
            if (varInfo == null) {
                System.out.println("Error: Variable '" + varName + "' no ha sido declarada.");
            }else{
                Nodo tmp = new Nodo(varInfo,parser.contador);
                RESULT = tmp;
            }
        :}
    |   NUMBER:n {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"num: "+Integer.parseInt(n.toString()));
            Nodo tmp = new Nodo(new Info(n.toString(),Simbolo.NUMBER,Integer.parseInt(n.toString()),"entero"),parser.contador);
            RESULT = tmp;
        :}
    |   TRUE {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TRUE");
			Nodo tmp = new Nodo(new Info("true",Simbolo.TRUE,1,"booleano"),parser.contador);
            RESULT = tmp;
        :}
    |   FALSE {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"FALSE");
			Nodo tmp = new Nodo(new Info("false",Simbolo.FALSE,0,"booleano"),parser.contador);
            RESULT = tmp;
        :}
;

TYPE::=	
		INT {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TYPE INT");
			Nodo tmp = new Nodo(new Info("entero",Simbolo.INT,null,"entero"),parser.contador);
			RESULT = tmp;
		:}
	|	BOOL {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TYPE BOOL");
			Nodo tmp = new Nodo(new Info("booleano",Simbolo.BOOL,null,"booleano"),parser.contador);
			RESULT = tmp;
		:}
;

VAR ::=
        ID:id {:
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"variable:"+id.toString());
            
            // Buscar la variable en la tabla de símbolos
            //String varName = id.toString();
            //Info varInfo = parser.symbolTable.lookup(varName);
            
            Nodo tmp = new Nodo(new Info(id.toString(),Simbolo.ID,null,"variable",parser.offSetCounter),parser.contador);
            parser.offSetCounter = parser.offSetCounter - 16;
            RESULT = tmp;

        :}
;

COMP ::=
        EXP:a LESS EXP:b {:
            parser.contador++;
            parser.tmpNameCounter++;
            // Verificar que ambos operandos son del mismo tipo y compatibles con desigualdad
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en desigualdad. Ambos deben ser enteros.");
            } else {
                // Evaluar la expresión para obtener el resultado booleano
                boolean resultadoDesigualdad = a.info.value < b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp < exp");

                // Crear un nuevo nodo con tipo "booleano"
                Info tmpInfo = new Info("\"<\"", Simbolo.LESS, resultadoDesigualdad ? 1 : 0, "booleano", null);
                Nodo tmp = new Nodo(tmpInfo, parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;
            }
        :}
    |   EXP:a GREATER EXP:b {:
            parser.contador++;
            parser.tmpNameCounter++;
            // Verificar que ambos operandos son del mismo tipo y compatibles con desigualdad
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en desigualdad. Ambos deben ser enteros.");
            } else {
                // Evaluar la expresión para obtener el resultado booleano
                boolean resultadoDesigualdad = a.info.value > b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp > exp");

                // Crear un nuevo nodo con tipo "booleano"
                Info tmpInfo = new Info("\">\"", Simbolo.GREATER, resultadoDesigualdad ? 1 : 0, "booleano", null);
                Nodo tmp = new Nodo(tmpInfo, parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;
            }
        :}
;
